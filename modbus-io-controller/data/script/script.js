async function updateNetworkInfo(){const e=document.getElementById("settings");if(e&&e.classList.contains("active"))try{const e=await fetch("/api/network"),t=await e.json(),a=document.getElementById("currentIP"),n=document.getElementById("macAddress");a&&(a.textContent=t.ip||"Not Connected"),n&&(n.textContent=t.mac||"")}catch(e){console.error("Error updating network info:",e)}}async function saveTimeSettings(){const e=document.getElementById("currentDate").value,t=document.getElementById("currentTime").value.split(":"),a=`${t[0]}:${t[1]}`,n=document.getElementById("timezone").value,o=document.getElementById("enableNTP").checked,s=document.getElementById("enableDST").checked,r=showToast("info","Saving...","Updating date and time settings",1e4);try{const t=await fetch("/api/time",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({date:e,time:a,timezone:n,ntpEnabled:o,dstEnabled:s})});if(r.parentNode&&r.parentNode.removeChild(r),!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const d=await t.json();console.log("Time settings updated:",d),showToast("success","Success","Date and time settings saved successfully"),updateLiveClock()}catch(e){console.error("Error saving time settings:",e),showToast("error","Error","Failed to save date and time settings")}}async function updateLiveClock(){const e=document.getElementById("settings"),t=document.getElementById("system");if(!(e&&e.classList.contains("active")||t&&t.classList.contains("active")))return;const a=document.getElementById("liveClock");if(a)try{const e=await fetch("/api/time"),t=await e.json();if(console.log("Time data received:",t),t.date&&t.time&&t.timezone){const e=`${t.date}T${t.time}${t.timezone}`,n=new Date(e),o=new Intl.DateTimeFormat("en-NZ",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZone:t.timezone}).format(n)+" "+t.timezone+(t.dst?" (DST)":"");a.textContent=o}const n=document.getElementById("ntpStatusContainer"),o=document.getElementById("ntpStatus"),s=document.getElementById("lastNtpUpdate");if(t.ntpEnabled){if(n.style.display="block",o&&t.hasOwnProperty("ntpStatus")){o.className="ntp-status";let e="";switch(t.ntpStatus){case 0:e="Current",o.classList.add("ntp-status-current");break;case 1:e="Stale",o.classList.add("ntp-status-stale");break;default:e="Failed",o.classList.add("ntp-status-failed")}o.textContent=e}s&&t.hasOwnProperty("lastNtpUpdate")&&(s.textContent=t.lastNtpUpdate)}else n.style.display="none"}catch(e){console.error("Error updating clock:",e)}}function updateInputStates(){const e=document.getElementById("enableNTP").checked,t=document.getElementById("currentDate"),a=document.getElementById("currentTime");t&&a&&(t.disabled=e,a.disabled=e)}async function loadInitialSettings(){try{const e=await fetch("/api/time"),t=await e.json();t&&(document.getElementById("enableNTP").checked=t.ntpEnabled,document.getElementById("enableDST").checked=t.dst,document.getElementById("timezone").value=t.timezone,updateInputStates())}catch(e){console.error("Error loading initial settings:",e)}}async function loadNetworkSettings(){try{const e=await fetch("/api/network"),t=await e.json();if(console.log("Network settings received:",t),t){const e=document.getElementById("ipConfig");e&&(e.value=t.mode,e.dispatchEvent(new Event("change"))),document.getElementById("ipAddress").value=t.ip||"",document.getElementById("subnetMask").value=t.subnet||"",document.getElementById("gateway").value=t.gateway||"",document.getElementById("dns").value=t.dns||"",document.getElementById("hostName").value=t.hostname||"",document.getElementById("ntpServer").value=t.ntp||"",document.getElementById("modbusTcpPort").value=t.modbusTcpPort||502}}catch(e){console.error("Error loading network settings:",e)}}async function loadVersionInfo(e=0){try{const e=await fetch("/api/system/version",{method:"GET",headers:{"Cache-Control":"no-cache",Pragma:"no-cache"}});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const t=await e.json(),a=document.getElementById("versionInfo");a&&t.version_string&&(a.textContent=t.version_string,console.log("✓ Version info loaded successfully:",t.version_string))}catch(t){if(console.error(`Error loading version info (attempt ${e+1}/4):`,t),e<3)console.log("Retrying version info load in 1000ms..."),setTimeout(()=>{loadVersionInfo(e+1)},1e3*(e+1));else{console.log("All version info retries failed, using fallback");const e=document.getElementById("versionInfo");e&&(e.textContent="Modbus TCP IO System")}}}async function updateSystemStatus(){try{const e=await fetch("/api/system/status"),t=await e.json();if(t.power){document.getElementById("mainVoltage").textContent=t.power.mainVoltage.toFixed(1)+"V";const e=document.getElementById("mainVoltageStatus");e.textContent=t.power.mainVoltageOK?"OK":"OUT OF RANGE",e.className="status "+(t.power.mainVoltageOK?"ok":"error")}if(t.rtc){const e=document.getElementById("rtcStatus");e.textContent=t.rtc.ok?"OK":"ERROR",e.className="status "+(t.rtc.ok?"ok":"error"),document.getElementById("rtcTime").textContent=t.rtc.time}const a=document.getElementById("modbusStatus");if(t.modbus&&t.modbus.busy?(a.textContent="BUSY",a.className="status warning"):t.modbus&&t.modbus.hasOfflineBoards?(a.textContent="BOARDS OFFLINE",a.className="status warning"):t.modbus&&t.modbus.connected?(a.textContent="CONNECTED",a.className="status connected"):(a.textContent="NOT-CONNECTED",a.className="status not-connected"),t.modbusTcp){console.log("Full modbusTcp data:",t.modbusTcp);const e=document.getElementById("modbusTcpStatus"),a=document.getElementById("modbusTcpPortStatus"),n=document.getElementById("modbusTcpClients"),o=document.getElementById("modbusTcpClientDetails"),s=document.getElementById("modbusTcpClientList");e&&(t.modbusTcp.enabled?(e.textContent="ENABLED",e.className="status ok"):(e.textContent="DISABLED",e.className="status warning")),a&&(a.textContent=t.modbusTcp.port||502),n&&(n.textContent=t.modbusTcp.connectedClients||0),o&&s&&(t.modbusTcp.clients&&t.modbusTcp.clients.length>0?(o.style.display="block",s.innerHTML="",t.modbusTcp.clients.forEach(e=>{const t=document.createElement("div");t.className="client-item",t.textContent=e,s.appendChild(t)})):o.style.display="none")}if(t.sd){const e=document.getElementById("sdStatus");t.sd.inserted?t.sd.ready?(e.textContent="OK",e.className="status ok",document.getElementById("sdCapacityContainer").style.display="flex",document.getElementById("sdFreeSpaceContainer").style.display="flex",document.getElementById("sdCapacity").textContent=t.sd.capacityGB.toFixed(2)+" GB",document.getElementById("sdFreeSpace").textContent=t.sd.freeSpaceGB.toFixed(2)+" GB"):(e.textContent="ERROR",e.className="status error",hideSDDetails()):(e.textContent="NOT INSERTED",e.className="status warning",hideSDDetails())}}catch(e){console.error("Error updating system status:",e)}}function hideSDDetails(){document.getElementById("sdCapacityContainer").style.display="none",document.getElementById("sdFreeSpaceContainer").style.display="none"}function updateStatusIfSystemTabActive(){document.querySelector("#system").classList.contains("active")&&updateSystemStatus()}function showToast(e,t,a,n=3e3){const o=document.getElementById("toastContainer"),s=document.createElement("div");s.className=`toast toast-${e}`;let r="";switch(e){case"success":r="✓";break;case"error":r="✗";break;default:r="ℹ"}return s.innerHTML=`\n        <div class="toast-icon">${r}</div>\n        <div class="toast-content">\n            <div class="toast-title">${t}</div>\n            <div class="toast-message">${a}</div>\n        </div>\n    `,o.appendChild(s),setTimeout(()=>{s.classList.add("toast-exit"),setTimeout(()=>{o.contains(s)&&o.removeChild(s)},300)},n),s}document.querySelectorAll("nav a").forEach(e=>{e.addEventListener("click",e=>{e.preventDefault();const t=e.target.dataset.page;document.querySelectorAll(".page").forEach(e=>e.classList.remove("active")),document.querySelector(`#${t}`).classList.add("active"),document.querySelectorAll("nav a").forEach(e=>e.classList.remove("active")),e.target.classList.add("active")})}),document.addEventListener("DOMContentLoaded",()=>{console.log("DOM loaded - initialising board configuration system"),setTimeout(()=>{loadVersionInfo()},500),loadBoardConfigurations(),loadInitialSettings(),loadNetworkSettings(),updateLiveClock(),updateNetworkInfo(),document.querySelector("#system").classList.contains("active")&&updateSystemStatus();const e=document.getElementById("enableNTP");e&&e.addEventListener("change",updateInputStates);const t=document.getElementById("saveTimeBtn");t&&t.addEventListener("click",saveTimeSettings);const a=document.getElementById("ipConfig");if(a){const e=()=>{const e=document.getElementById("staticSettings");e&&(e.style.display="static"===a.value?"block":"none")};a.addEventListener("change",e),e()}}),setInterval(updateLiveClock,1e3),setInterval(updateNetworkInfo,5e3),setInterval(updateBoardsListStatus,2e3),setInterval(updateStatusIfSystemTabActive,1e3),document.querySelectorAll('nav a[data-page="system"]').forEach(e=>{e.addEventListener("click",()=>{updateSystemStatus()})}),document.getElementById("networkForm").addEventListener("submit",async function(e){e.preventDefault();const t=document.getElementById("networkStatus");if(t.textContent="",t.className="","static"===document.getElementById("ipConfig").value){const e=["ipAddress","subnetMask","gateway","dns"];for(const t of e){if(!document.getElementById(t).checkValidity())return void showToast("error","Validation Error",`Invalid ${t.replace(/([A-Z])/g," $1").toLowerCase()}`)}}const a={mode:document.getElementById("ipConfig").value,ip:document.getElementById("ipAddress").value,subnet:document.getElementById("subnetMask").value,gateway:document.getElementById("gateway").value,dns:document.getElementById("dns").value,hostname:document.getElementById("hostName").value,ntp:document.getElementById("ntpServer").value,dst:document.getElementById("enableDST").checked,modbusTcpPort:parseInt(document.getElementById("modbusTcpPort").value)},n=showToast("info","Saving...","Updating network settings",1e4);try{const e=await fetch("/api/network",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});n.parentNode&&n.parentNode.removeChild(n);const t=await e.json();if(e.ok){showToast("success","Success","Network settings saved. The device will restart to apply changes...",5e3);setTimeout(()=>{window.location.reload()},5e3)}else showToast("error","Error",t.error||"Failed to save network settings")}catch(e){n.parentNode&&n.parentNode.removeChild(n),showToast("error","Network Error",e.message||"Failed to connect to the server")}}),document.getElementById("ipConfig").addEventListener("change",function(){const e=document.getElementById("staticSettings");"static"===this.value?e.classList.remove("hidden"):e.classList.add("hidden")}),document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("rebootButton"),t=document.getElementById("rebootModal"),a=document.getElementById("cancelReboot"),n=document.getElementById("confirmReboot");e&&e.addEventListener("click",()=>{t.classList.add("active")}),a&&a.addEventListener("click",()=>{t.classList.remove("active")}),n&&n.addEventListener("click",async()=>{try{n.textContent="Rebooting...",n.disabled=!0;const e=await fetch("/api/system/reboot",{method:"POST",headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);{t.classList.remove("active"),showToast("info","System Rebooting","The system is rebooting. This page will be unavailable for a few moments.");let e=12;const a=document.createElement("div");a.className="reconnect-message",a.innerHTML=`<p>Reconnecting in <span id="countdown">${e}</span> seconds...</p>`,document.body.appendChild(a);const n=setInterval(()=>{e--,document.getElementById("countdown").textContent=e,e<=0&&(clearInterval(n),window.location.reload())},1e3)}}catch(e){console.error("Error rebooting system:",e),showToast("error","Reboot Failed","Failed to reboot the system. Please try again."),n.textContent="Yes, Reboot",n.disabled=!1,t.classList.remove("active")}})});let fileManagerActive=!1,sdStatusInterval=null,currentPath="/";function loadDirectory(e,t=0){if(!fileManagerActive)return;const a=document.getElementById("file-list-items");if(!a)return;a.innerHTML='<div class="loading">Loading files...</div>',updatePathNavigator(e);setTimeout(()=>{fetch(`/api/sd/list?path=${encodeURIComponent(e)}`).then(n=>{if(!n.ok){if(503===n.status&&t<3){const n=1e3*(t+1);return console.log(`SD card not ready, retrying in ${n}ms (attempt ${t+1}/3)`),a.innerHTML=`<div class="loading">SD card initialising, please wait... (${t+1}/3)</div>`,setTimeout(()=>{loadDirectory(e,t+1)},n),null}throw new Error(503===n.status?"SD card not ready. It may be initialising or experiencing an issue.":"Failed to list directory")}return n.json()}).then(t=>{t&&(displayDirectoryContents(t),currentPath=e)}).catch(n=>{console.error("Error loading directory:",n),a.innerHTML=`\n                    <div class="error-message">\n                        ${n.message||"Failed to load directory contents"}\n                        ${t>=3?'<div class="retry-action"><button id="retryButton" class="download-btn">Retry</button></div>':""}\n                    </div>\n                `;const o=document.getElementById("retryButton");o&&o.addEventListener("click",()=>{loadDirectory(e,0)})})},0===t?500:0)}function checkAndLoadDirectory(){if(!fileManagerActive)return;const e=document.getElementById("file-list-items"),t=document.getElementById("path-navigator"),a=document.getElementById("sd-status");e&&a&&fetch("/api/system/status").then(e=>e.json()).then(n=>{n.sd&&n.sd.inserted&&n.sd.ready?loadDirectory(currentPath):n.sd&&n.sd.inserted?(a.innerHTML='<div class="status-info">SD Card initialising, please wait...</div>',setTimeout(checkAndLoadDirectory,1500)):(a.innerHTML='<div class="status-error">SD Card not inserted</div>',e.innerHTML='<div class="error-message">SD Card is not inserted. Please insert an SD card to view files.</div>',t&&(t.innerHTML=""))}).catch(e=>{console.error("Error checking SD status:",e),setTimeout(checkAndLoadDirectory,2e3)})}function checkSDCardStatus(){if(!fileManagerActive)return;const e=document.getElementById("file-list-items"),t=document.getElementById("path-navigator"),a=document.getElementById("sd-status");e&&a&&fetch("/api/system/status").then(e=>e.json()).then(n=>{if(n.sd.inserted){n.sd.ready&&n.sd.capacityGB?a.innerHTML=`<div class="status-good">SD Card Ready - ${n.sd.freeSpaceGB.toFixed(2)} GB free of ${n.sd.capacityGB.toFixed(2)} GB</div>`:a.innerHTML='<div class="status-info">SD Card inserted</div>';const t=e.querySelector(".error-message");t&&t.textContent.includes("not inserted")&&checkAndLoadDirectory()}else a.innerHTML='<div class="status-error">SD Card not inserted</div>',e.innerHTML='<div class="error-message">SD Card is not inserted. Please insert an SD card to view files.</div>',t&&(t.innerHTML="")}).catch(e=>{console.error("Error checking SD status:",e)})}function initFileManager(){document.getElementById("filemanager")&&(console.log("Initialising file manager"),fileManagerActive=!0,checkSDCardStatus(),sdStatusInterval&&clearInterval(sdStatusInterval),sdStatusInterval=setInterval(checkSDCardStatus,3e3),checkAndLoadDirectory())}function navigateTo(e){fileManagerActive&&loadDirectory(e)}function formatFileSize(e){if(0===e)return"0 B";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["B","KB","MB","GB","TB"][t]}function updatePathNavigator(e){const t=document.getElementById("path-navigator");if(!t)return;t.innerHTML="";const a=e.split("/").filter(e=>""!==e),n=document.createElement("span");n.className="path-part",n.textContent="Root",n.onclick=()=>navigateTo("/"),t.appendChild(n);let o="";a.forEach((e,n)=>{const s=document.createElement("span");s.className="path-separator",s.textContent=" / ",t.appendChild(s),o+="/"+e;const r=document.createElement("span");if(r.className="path-part",r.textContent=e,n<a.length-1){const e=o;r.onclick=()=>navigateTo(e)}t.appendChild(r)})}function displayDirectoryContents(e){const t=document.getElementById("file-list-items");if(!t)return;t.innerHTML="";const a=5242880;0!==e.directories.length||0!==e.files.length?(e.directories.forEach(e=>{const a=document.createElement("div");a.className="directory-item";const n=e.name;a.innerHTML=`\n            <div class="file-name">${n}</div>\n            <div class="file-size">Directory</div>\n            <div class="file-modified">-</div>\n            <div class="file-actions"></div>\n        `,a.onclick=()=>navigateTo(e.path),t.appendChild(a)}),e.files.forEach(e=>{const n=document.createElement("div");n.className="file-item";const o=e.size>a,s=o?"download-btn disabled":"download-btn",r=o?`File is too large to download (${formatFileSize(e.size)}). Maximum size is ${formatFileSize(a)}.`:"Download this file";n.innerHTML=`\n            <div class="file-name" data-path="${e.path}">${e.name}</div>\n            <div class="file-size">${formatFileSize(e.size)}</div>\n            <div class="file-modified">${e.modified||"-"}</div>\n            <div class="file-actions">\n                <button class="${s}" data-path="${e.path}" title="${r}">Download</button>\n            </div>\n        `,t.appendChild(n);n.querySelector(".file-name").addEventListener("click",e=>{e.stopPropagation();viewFile(e.target.getAttribute("data-path"))});const d=n.querySelector(".download-btn");o||d.addEventListener("click",e=>{e.stopPropagation();downloadFile(e.target.getAttribute("data-path"))})})):t.innerHTML='<div class="empty-message">This directory is empty</div>'}function downloadFile(e){const t=e.split("/").pop(),a=`/api/sd/download?path=${encodeURIComponent(e)}`,n=document.createElement("a");n.href=a,n.download=t,n.setAttribute("download",t),document.body.appendChild(n),n.click(),document.body.removeChild(n)}function viewFile(e){const t=`/api/sd/view?path=${encodeURIComponent(e)}`;window.open(t,"_blank")}document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector('a[data-page="filemanager"]');e&&e.addEventListener("click",()=>{fileManagerActive=!0,initFileManager()}),document.querySelectorAll('nav a:not([data-page="filemanager"])').forEach(e=>{e.addEventListener("click",()=>{fileManagerActive=!1,sdStatusInterval&&(clearInterval(sdStatusInterval),sdStatusInterval=null)})}),document.querySelector("#filemanager.active")&&(fileManagerActive=!0,initFileManager())});let boardConfigurations=[],editingBoardIndex=null,connectStatusGlobal=[],initStatusGlobal=[];function getCurrentEditingBoardId(){return null!==editingBoardIndex&&boardConfigurations[editingBoardIndex]?boardConfigurations[editingBoardIndex].id:null}function getBoardTypeValue(e){switch(e){case"CONTROLLER_IO":default:return 0;case"ANALOGUE_DIGITAL_IO":return 1;case"THERMOCOUPLE_IO":return 2;case"RTD_IO":return 3;case"ENERGY_METER":return 4}}async function loadBoardConfigurations(){console.log("Loading board configurations from binary-backed API...");let e=0,t=null;for(;e<3;)try{const t=`/api/boards/all?t=${(new Date).getTime()}`;console.log(`Attempt ${e+1}/3 - Fetching from optimized endpoint: ${t}`);const a=await fetch(t,{method:"GET",headers:{Accept:"application/json","Cache-Control":"no-cache",Pragma:"no-cache"}});if(a.ok){console.log("✓ Successful response from binary-backed API");const e=await a.text();let t;try{t=JSON.parse(e)}catch(t){throw console.error("JSON parse error:",t),console.error("Raw response:",e.substring(0,500)),new Error(`Invalid JSON response: ${t.message}`)}if(!t||"object"!=typeof t)throw new Error("Invalid response format: expected object");return t.boards&&Array.isArray(t.boards)?(boardConfigurations=t.boards,console.log(`✓ Loaded ${boardConfigurations.length} board configurations from binary storage`),boardConfigurations.forEach((e,t)=>{e.hasOwnProperty("id")&&e.hasOwnProperty("name")&&e.hasOwnProperty("type")||console.warn(`Board ${t} missing required properties:`,e),2!==e.type||e.channels&&Array.isArray(e.channels)||console.warn(`Thermocouple board ${t} missing channels array:`,e)}),boardConfigurations.length>0&&console.log("Sample board data:",boardConfigurations[0])):(boardConfigurations=[],console.log("No boards found in response - initializing empty array")),void renderBoardsList()}{const e=await a.text();throw new Error(`HTTP ${a.status}: ${e}`)}}catch(a){if(t=a,console.error(`Attempt ${e+1}/3 failed:`,a.message),e++,e<3){const t=Math.min(500*Math.pow(2,e),5e3);console.log(`Retrying in ${t}ms...`),await new Promise(e=>setTimeout(e,t))}}console.error("✗ Failed to load board configurations after all retries:",t?.message),showToast("error","Configuration Error","Unable to load board configurations. Please check device connection."),boardConfigurations=[],renderBoardsList()}async function sendBoardRequest(e,t,a,n){let o=0,s=null;for(console.log(`Sending ${t} request to binary-backed API:`,e),console.log("Request data:",JSON.stringify(a,null,2));o<3;)try{console.log(`Attempt ${o+1}/3 - ${t} ${e}`);const s=await fetch(e,{method:t,headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"no-cache",Pragma:"no-cache"},body:JSON.stringify(a)});if(!s.ok){const e=await s.text();console.error(`Server error (${s.status}):`,e);try{const t=JSON.parse(e);throw new Error(t.error||`HTTP ${s.status}`)}catch(t){throw new Error(`HTTP ${s.status}: ${e}`)}}let r=null;try{const e=await s.text();e.trim()&&(r=JSON.parse(e),console.log("✓ Server response:",r))}catch(e){console.log("✓ Server responded successfully (no JSON data)")}return showToast("success","Success",n),!0}catch(e){if(s=e,console.error(`Attempt ${o+1}/3 failed:`,e.message),o++,o<3){const e=Math.min(500*Math.pow(2,o),3e3);console.log(`Retrying in ${e}ms...`),await new Promise(t=>setTimeout(t,e))}}return console.error("✗ Board request failed after all retries:",s?.message),showToast("error","Request Failed",`Failed to ${t.toLowerCase()} board configuration: ${s?.message}`),!1}async function deleteBoard(e){if(confirm("Are you sure you want to delete this board configuration?"))try{const t=boardConfigurations[e].id;console.log("Deleting board with ID:",t);const a=3;let n=0,o=null;for(;n<a;)try{console.log(`Attempt ${n+1}/${a} - Sending DELETE request`);const e=(new Date).getTime(),o=await fetch(`/api/boards/delete?id=${t}&t=${e}`,{method:"GET",headers:{"Cache-Control":"no-cache",Pragma:"no-cache"}});if(!o.ok){const e=await o.text();throw console.error("Server response:",e),new Error(`HTTP error! status: ${o.status}`)}return showToast("success","Success","Board deleted successfully"),void loadBoardConfigurations()}catch(e){if(o=e,console.error(`Attempt ${n+1}/${a} failed:`,e),n++,n<a){const e=500*Math.pow(2,n);console.log(`Retrying in ${e}ms...`),await new Promise(t=>setTimeout(t,e))}}throw new Error(`Failed to delete board after ${a} attempts`)}catch(e){console.error("Error deleting board:",e),showToast("error","Error","Failed to delete board")}}async function saveBoardConfiguration(){const e=document.getElementById("boardType").value,t=document.getElementById("boardName").value.trim(),a=document.getElementById("modbusPort").value;if(!e||!t||!a)return void showToast("error","Validation Error","Please fill in all required fields");if(t.length>13)return void showToast("error","Validation Error","Board name must be 13 characters or less");const n=getCurrentEditingBoardId();if(boardConfigurations.find(e=>e.name.toLowerCase()===t.toLowerCase()&&e.id!==n))return void showToast("error","Validation Error",`Board name "${t}" is already in use. Please choose a unique name.`);let o=!0,s="";const r=parseInt(document.getElementById("pollTime").value);(isNaN(r)||r<1||r>3600)&&(o=!1,s="Poll time must be between 1 second and 1 hour");const d=parseInt(document.getElementById("recordInterval").value);if((isNaN(d)||d<15||d>3600)&&(o=!1,s="Record interval must be between 15 seconds and 1 hour"),"THERMOCOUPLE_IO"===e){for(let e=0;e<8;e++){const t=parseInt(document.getElementById(`alertHysteresis_${e}`).value);if(isNaN(t)||t<0||t>255){o=!1,s=`Channel ${e+1}: Hysteresis must be between 0 and 255`;break}}for(let e=0;e<8;e++){const t=document.getElementById(`channelName_${e}`).value;if(!t){o=!1,s=`Channel ${e+1}: Custom channel name is required`;break}if(t.length>32){o=!1,s=`Channel ${e+1}: Custom channel name must be 32 characters or less`;break}}}if(o)try{const n={name:t,type:getBoardTypeValue(e),modbus_port:parseInt(a),poll_time:1e3*parseInt(document.getElementById("pollTime").value),record_interval:1e3*parseInt(document.getElementById("recordInterval").value)};if("THERMOCOUPLE_IO"===e){n.channels=[];for(let e=0;e<8;e++){const t=parseFloat(document.getElementById(`alertSetpoint_${e}`).value),a=parseInt(document.getElementById(`alertHysteresis_${e}`).value);n.channels.push({alert_enable:document.getElementById(`alertEnable_${e}`).checked,output_enable:document.getElementById(`outputEnable_${e}`).checked,alert_latch:document.getElementById(`alertLatch_${e}`).checked,alert_edge:document.getElementById(`alertEdge_${e}`).checked,tc_type:parseInt(document.getElementById(`tcType_${e}`).value),alert_setpoint:t,alert_hysteresis:a,channel_name:document.getElementById(`channelName_${e}`).value,record_temperature:document.getElementById(`recordTemperature_${e}`).checked,record_cold_junction:document.getElementById(`recordColdJunction_${e}`).checked,record_status:document.getElementById(`recordStatus_${e}`).checked,show_on_dashboard:document.getElementById(`showOnDashboard_${e}`).checked,monitor_fault:document.getElementById(`monitorFault_${e}`).checked,monitor_alarm:document.getElementById(`monitorAlarm_${e}`).checked})}}if(null!==editingBoardIndex){const e=boardConfigurations[editingBoardIndex].id;n.id=e,console.log("Sending update request:",JSON.stringify(n));if(!await sendBoardRequest("/api/boards","PUT",n,"Board configuration updated"))return}else{if(boardConfigurations.length>=8)return void showToast("error","Board Limit Reached","Maximum of 8 boards allowed. Please delete an existing board before adding a new one.");console.log("Sending add request:",JSON.stringify(n)),void 0!==n.type&&(n.type=Number(n.type)),void 0!==n.modbus_port&&(n.modbus_port=Number(n.modbus_port)),void 0!==n.poll_time&&(n.poll_time=Number(n.poll_time)),n.channels&&Array.isArray(n.channels)&&n.channels.forEach(e=>{void 0!==e.tc_type&&(e.tc_type=Number(e.tc_type)),void 0!==e.alert_setpoint&&(e.alert_setpoint=Number(e.alert_setpoint)),void 0!==e.alert_hysteresis&&(e.alert_hysteresis=Number(e.alert_hysteresis))});const e=JSON.stringify(n);console.log("Formatted JSON data:",e);if(!await sendBoardRequest("/api/boards","POST",n,"New board added"))return}hideBoardConfigForm(),loadBoardConfigurations(),document.querySelector("#dashboard").classList.contains("active")?loadDashboardItems():window.dashboardNeedsReload=!0}catch(e){console.error("Error saving board configuration:",e),showToast("error","Error","Failed to save board configuration")}else showToast("error","Validation Error",s)}function renderBoardsList(){const e=document.getElementById("boardsList"),t=document.getElementById("noBoards");if(!boardConfigurations||0===boardConfigurations.length)return t&&(t.style.display="block"),void(e&&(e.innerHTML="",e.classList.remove("has-boards")));t&&(t.style.display="none"),e&&(e.innerHTML="",e.classList.add("has-boards"),boardConfigurations.forEach((t,a)=>{renderSingleBoard(t,a,e)}))}function renderSingleBoard(e,t,a){const n=document.createElement("div");n.className="board-item";let o="Unknown";e.type_name?o=e.type_name:0===e.type&&(o="Thermocouple IO");const s=e.initialised?"Initialised":"Not Initialised",r="Initialised"===s?"init-status-ok":"init-status-pending",d=e.connected?"Online":"Offline",i="Online"===d?"connect-status-ok":"connect-status-error";n.innerHTML=`\n        <div class="board-info">\n        <span class="board-type">${e.name||"Unnamed Board"}</span>\n        <span class="board-details">Type: ${o}, Port: ${e.modbus_port+1}, Slave ID: ${e.slave_id}</span>\n        <div class="board-status-container">\n            <span class="board-init-status ${r}" id="init-status-${t}">Status: ${s}</span>\n            <span class="board-connect-status ${i}" id="connect-status-${t}">Connection: ${d}</span>\n        </div>\n    </div>\n        <div class="board-actions">\n            <button class="btn-edit" data-index="${t}"><i class="fas fa-edit"></i> Edit</button>\n            <button class="btn-initialise" data-index="${t}" onclick="console.log('Init button direct click for index ${t}');showInitialisePrompt(${t})"><i class="fas fa-microchip"></i> Initialise</button>\n            <button class="btn-delete" data-index="${t}"><i class="fas fa-trash"></i> Delete</button>\n        </div>\n    `,a.appendChild(n);const l=n.querySelector(".btn-edit");l&&l.addEventListener("click",()=>editBoard(t));const c=n.querySelector(".btn-initialise");c&&(console.log(`Adding click handler to initialise button for board index ${t}`),c.addEventListener("click",function(){console.log(`Initialise button clicked for board index ${t}`),showInitialisePrompt(t)}));const u=n.querySelector(".btn-delete");u&&u.addEventListener("click",()=>deleteBoard(t))}function updateBoardsListStatus(){document.getElementById("board-config").classList.contains("active")&&loadBoardsListStatus(),connectStatusRefreshInterval&&clearInterval(connectStatusRefreshInterval)}async function loadBoardsListStatus(){console.log("Updating boards list connection status...");try{const e=await fetch("/api/status");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();console.log("Board connection status data:",t);const a=t.map(e=>e.connected),n=t.map(e=>e.initialised);for(let e=0;e<boardConfigurations.length;e++){const t=document.getElementById(`init-status-${e}`);if(t){const a=n[e];t.textContent="Status: "+(a?"Initialised":"Not Initialised"),t.className="board-init-status "+(a?"init-status-ok":"init-status-pending")}const o=document.getElementById(`connect-status-${e}`);if(o){const t=a[e];o.textContent="Connection: "+(t?"Online":"Offline"),o.className="board-connect-status "+(t?"connect-status-ok":"connect-status-error")}}}catch(e){console.error("Error loading board connection status:",e),showToast("error","Error","Failed to load board connection status information")}}function editBoard(e){showBoardConfigForm(e)}function showBoardConfigForm(e=null){const t=document.getElementById("boardConfigForm"),a=document.getElementById("formTitle");if(null!==e){console.log(`Editing board index ${e}`),editingBoardIndex=e;const t=boardConfigurations[e];a&&(a.textContent="Edit Expansion Board");const n=document.getElementById("boardType");switch(t.type){case 0:n.value="CONTROLLER_IO";break;case 1:n.value="ANALOGUE_DIGITAL_IO";break;case 2:default:n.value="THERMOCOUPLE_IO";break;case 3:n.value="RTD_IO";break;case 4:n.value="ENERGY_METER"}document.getElementById("boardName").value=t.name||"",document.getElementById("modbusPort").value=t.modbus_port,document.getElementById("pollTime").value=t.poll_time/1e3,document.getElementById("recordInterval").value=t.record_interval/1e3,showBoardTypeSettings(n.value),2===t.type&&t.channels&&Array.isArray(t.channels)&&t.channels.forEach((e,t)=>{document.getElementById(`alertEnable_${t}`).checked=e.alert_enable,document.getElementById(`outputEnable_${t}`).checked=e.output_enable,document.getElementById(`alertLatch_${t}`).checked=e.alert_latch,document.getElementById(`alertEdge_${t}`).checked=e.alert_edge,document.getElementById(`tcType_${t}`).value=e.tc_type,document.getElementById(`alertSetpoint_${t}`).value=e.alert_setpoint,document.getElementById(`alertHysteresis_${t}`).value=e.alert_hysteresis,document.getElementById(`channelName_${t}`).value=e.channel_name,document.getElementById(`recordTemperature_${t}`).checked=e.record_temperature,document.getElementById(`recordColdJunction_${t}`).checked=e.record_cold_junction,document.getElementById(`recordStatus_${t}`).checked=e.record_status,document.getElementById(`showOnDashboard_${t}`).checked=e.show_on_dashboard,document.getElementById(`monitorFault_${t}`).checked=e.monitor_fault,document.getElementById(`monitorAlarm_${t}`).checked=e.monitor_alarm})}else console.log("Adding new board"),editingBoardIndex=null,a&&(a.textContent="Add New Expansion Board"),document.getElementById("boardType").value="THERMOCOUPLE_IO",document.getElementById("boardName").value="",document.getElementById("modbusPort").value="0",document.getElementById("pollTime").value="15",document.getElementById("recordInterval").value="15",showBoardTypeSettings("THERMOCOUPLE_IO");t&&(t.style.display="block",setTimeout(()=>{const e=document.getElementById("formTitle");e&&e.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"})},100))}function hideBoardConfigForm(){const e=document.getElementById("boardConfigForm");e&&(e.style.display="none"),editingBoardIndex=null}function showDuplicateBoardModal(){const e=document.getElementById("duplicateBoardModal"),t=document.getElementById("boardToDuplicate"),a=document.getElementById("duplicatedBoardName");boardConfigurations&&0!==boardConfigurations.length?boardConfigurations.length>=8?showToast("warning","Board Limit Reached","Maximum number of boards (8) already configured."):(t.innerHTML="",boardConfigurations.forEach((e,a)=>{const n=document.createElement("option");n.value=a,n.textContent=`${e.name||`Board ${a+1}`} (${getBoardTypeString(e.type)})`,t.appendChild(n)}),a.value="",e.style.display="block"):showToast("warning","No Boards Available","No boards are configured to duplicate.")}function duplicateSelectedBoard(){const e=document.getElementById("boardToDuplicate"),t=document.getElementById("duplicatedBoardName"),a=document.getElementById("duplicateBoardModal"),n=parseInt(e.value),o=t.value.trim();if(isNaN(n)||n<0||n>=boardConfigurations.length)return void showToast("error","Invalid Selection","Please select a valid board to duplicate.");if(!o)return void showToast("error","Name Required","Please enter a name for the duplicated board.");if(boardConfigurations.some(e=>e.name===o))return void showToast("error","Name Already Exists","A board with this name already exists. Please choose a different name.");const s=boardConfigurations[n],r=JSON.parse(JSON.stringify(s));r.name=o,console.log("Duplicating board:",s.name,"with port:",s.modbus_port),console.log("New board:",o,"keeping same port:",r.modbus_port),a.style.display="none",showBoardConfigFormWithData(r),showToast("success","Board Duplicated","Board configuration copied successfully. Please review and save the new board.")}function getBoardTypeString(e){switch(e){case 0:return"Controller IO";case 1:return"Analogue/Digital IO";case 2:return"Thermocouple IO";case 3:return"RTD IO";case 4:return"Energy Meter";default:return"Unknown"}}function showBoardConfigFormWithData(e){const t=document.getElementById("boardConfigForm"),a=document.getElementById("formTitle");editingBoardIndex=null,a&&(a.textContent="Add New Expansion Board (Duplicated)");const n=document.getElementById("boardType");switch(e.type){case 0:n.value="CONTROLLER_IO";break;case 1:n.value="ANALOGUE_DIGITAL_IO";break;case 2:default:n.value="THERMOCOUPLE_IO";break;case 3:n.value="RTD_IO";break;case 4:n.value="ENERGY_METER"}document.getElementById("boardName").value=e.name||"",console.log("Setting modbus port field to:",e.modbus_port,"type:",typeof e.modbus_port),document.getElementById("modbusPort").value=e.modbus_port,document.getElementById("pollTime").value=e.poll_time/1e3,document.getElementById("recordInterval").value=e.record_interval/1e3,showBoardTypeSettings(n.value),2===e.type&&e.channels&&Array.isArray(e.channels)&&e.channels.forEach((e,t)=>{document.getElementById(`alertEnable_${t}`).checked=e.alert_enable,document.getElementById(`outputEnable_${t}`).checked=e.output_enable,document.getElementById(`alertLatch_${t}`).checked=e.alert_latch,document.getElementById(`alertEdge_${t}`).checked=e.alert_edge,document.getElementById(`tcType_${t}`).value=e.tc_type,document.getElementById(`alertSetpoint_${t}`).value=e.alert_setpoint,document.getElementById(`alertHysteresis_${t}`).value=e.alert_hysteresis,document.getElementById(`channelName_${t}`).value=e.channel_name,document.getElementById(`recordTemperature_${t}`).checked=e.record_temperature,document.getElementById(`recordColdJunction_${t}`).checked=e.record_cold_junction,document.getElementById(`recordStatus_${t}`).checked=e.record_status,document.getElementById(`showOnDashboard_${t}`).checked=e.show_on_dashboard,document.getElementById(`monitorFault_${t}`).checked=e.monitor_fault,document.getElementById(`monitorAlarm_${t}`).checked=e.monitor_alarm}),t&&(t.style.display="block",setTimeout(()=>{const e=document.getElementById("formTitle");e&&e.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"})},100))}function showBoardTypeSettings(e){if(document.querySelectorAll(".board-type-settings").forEach(e=>{e.style.display="none"}),"THERMOCOUPLE_IO"===e){const e=document.getElementById("thermocoupleSettings");e&&(e.style.display="block",setupThermocoupleChannelTabs())}}function setupThermocoupleChannelTabs(){const e=document.querySelector(".channel-tab-headers"),t=document.querySelector(".channel-tab-content");if(e&&t){e.innerHTML="",t.innerHTML="";for(let a=0;a<8;a++){const n=document.createElement("div");n.className=0===a?"channel-tab active":"channel-tab",n.dataset.channel=a,n.textContent=`Channel ${a+1}`,e.appendChild(n);const o=document.createElement("div");o.className=0===a?"channel-content active":"channel-content",o.dataset.channel=a,o.innerHTML=`\n            <div class="channel-form">\n                <div class="channel-form-left">\n                    <h4>Configuration switches</h4>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="alertEnable_${a}" class="form-check">\n                        <label for="alertEnable_${a}">Enable temperature alert</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="outputEnable_${a}" class="form-check">\n                        <label for="outputEnable_${a}">Enable output</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="alertLatch_${a}" class="form-check">\n                        <label for="alertLatch_${a}">Alert is latched until cleared</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="alertEdge_${a}" class="form-check">\n                        <label for="alertEdge_${a}">Alert on falling temperature</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="monitorFault_${a}" class="form-check">\n                        <label for="monitorFault_${a}">Monitor faults</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="monitorAlarm_${a}" class="form-check">\n                        <label for="monitorAlarm_${a}">Monitor alarms</label>\n                    </div>\n                </div>\n                <div class="channel-form-centre">\n                    <h4>Thermocouple settings</h4>\n                    <div class="form-group">\n                        <label for="tcType_${a}">Thermocouple Type:</label>\n                        <select id="tcType_${a}" class="form-control">\n                            <option value="0">Type K</option>\n                            <option value="1">Type J</option>\n                            <option value="2">Type T</option>\n                            <option value="3">Type N</option>\n                            <option value="4">Type S</option>\n                            <option value="5">Type E</option>\n                            <option value="6">Type B</option>\n                            <option value="7">Type R</option>\n                        </select>\n                    </div>\n                    <div class="form-group">\n                        <label for="alertSetpoint_${a}">Alert Setpoint (°C):</label>\n                        <input type="number" id="alertSetpoint_${a}" class="form-control" step="0.1" value="0">\n                    </div>\n                    <div class="form-group">\n                        <label for="alertHysteresis_${a}">Alert Hysteresis (°C):</label>\n                        <input type="number" id="alertHysteresis_${a}" class="form-control" min="0" max="255" step="1" value="0">\n                        <small class="helper-text"> Range: 0-255</small>\n                    </div>\n                    <div class="form-group">\n                        <label for="channelName_${a}">Custom channel name:</label>\n                        <input type="text" id="channelName_${a}" class="form-control" value="Channel ${a+1}">\n                    </div>\n                </div>\n                <div class="channel-form-right">\n                    <h4>Record & display settings</h4>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="recordTemperature_${a}" class="form-check">\n                        <label for="recordTemperature_${a}">Record temperature</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="recordColdJunction_${a}" class="form-check">\n                        <label for="recordColdJunction_${a}">Record cold junction</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="recordStatus_${a}" class="form-check">\n                        <label for="recordStatus_${a}">Record input status</label>\n                    </div>\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="showOnDashboard_${a}" class="form-check">\n                        <label for="showOnDashboard_${a}">Show on dashboard</label>\n                    </div>\n                </div>\n            </div>\n        `,t.appendChild(o)}document.querySelectorAll(".channel-tab").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.dataset.channel;document.querySelectorAll(".channel-tab").forEach(e=>{e.classList.remove("active")}),e.target.classList.add("active"),document.querySelectorAll(".channel-content").forEach(e=>{e.classList.remove("active")}),document.querySelector(`.channel-content[data-channel="${t}"]`).classList.add("active")})})}}document.addEventListener("DOMContentLoaded",()=>{console.log("DOM loaded - initialising board configuration system");const e=document.querySelector('a[data-page="board-config"]');e&&e.addEventListener("click",()=>{console.log("Board config tab clicked - refreshing board configurations"),loadBoardConfigurations()});const t=document.getElementById("addBoardBtn");t&&t.addEventListener("click",()=>{showBoardConfigForm()});const a=document.getElementById("exportConfigBtn");a&&a.addEventListener("click",()=>{exportBoardConfiguration()});const n=document.getElementById("importConfigBtn");n&&n.addEventListener("click",()=>{document.getElementById("configFileInput").click()});const o=document.getElementById("duplicateBoardBtn");o&&o.addEventListener("click",()=>{showDuplicateBoardModal()});const s=document.getElementById("configFileInput");s&&s.addEventListener("change",e=>{importBoardConfiguration(e.target.files[0])});const r=document.getElementById("importConfirmModal"),d=document.getElementById("cancelImport"),i=document.getElementById("importOverwrite"),l=document.getElementById("importOnline"),c=r?.querySelector(".close");d&&d.addEventListener("click",()=>{r.style.display="none",document.getElementById("configFileInput").value="",window.selectedConfigFile=null}),i&&i.addEventListener("click",()=>{r.style.display="none",window.selectedConfigFile&&(performImport(window.selectedConfigFile,"overwrite"),window.selectedConfigFile=null)}),l&&l.addEventListener("click",()=>{r.style.display="none",window.selectedConfigFile&&(performImport(window.selectedConfigFile,"online"),window.selectedConfigFile=null)}),c&&c.addEventListener("click",()=>{r.style.display="none",document.getElementById("configFileInput").value="",window.selectedConfigFile=null}),r&&window.addEventListener("click",e=>{e.target===r&&(r.style.display="none",document.getElementById("configFileInput").value="",window.selectedConfigFile=null)});const u=document.getElementById("duplicateBoardModal"),m=document.getElementById("cancelDuplicate"),h=document.getElementById("confirmDuplicate"),p=document.getElementById("closeDuplicateModal");m&&m.addEventListener("click",()=>{u.style.display="none"}),h&&h.addEventListener("click",()=>{duplicateSelectedBoard()}),p&&p.addEventListener("click",()=>{u.style.display="none"}),u&&window.addEventListener("click",e=>{e.target===u&&(u.style.display="none")});const g=document.getElementById("boardType");g&&g.addEventListener("change",()=>{showBoardTypeSettings(g.value)});const b=document.getElementById("cancelBoardConfig");b&&b.addEventListener("click",()=>{hideBoardConfigForm()});const y=document.getElementById("saveBoardConfig");y&&y.addEventListener("click",()=>{saveBoardConfiguration()});const f=document.getElementById("cancelInitBoard"),v=document.getElementById("confirmInitBoard"),E=document.getElementById("initBoardModal");console.log("Setting up initialisation modal handlers"),console.log("Cancel button exists:",!!f),console.log("Confirm button exists:",!!v),console.log("Modal exists:",!!E),f?(console.log("Setting up cancel initialisation handler"),f.addEventListener("click",()=>{console.log("Cancel initialisation clicked"),hideInitialisePrompt()})):console.log("Cancel initialisation button not found"),v?(console.log("Setting up confirm initialisation handler"),v.onclick=function(){console.log("Confirm initialisation clicked via onclick");const e=initialisingBoardIndex;console.log("Stored board index for initialisation:",e),hideInitialisePrompt(),null!==e?(console.log("Initialising board index:",e),setTimeout(()=>{console.log("Calling initialiseBoard with index:",e),initialiseBoard(e)},100)):console.error("No board index specified for initialisation")}):console.log("Confirm initialisation button not found"),E?(console.log("Setting up modal outside click handler"),E.addEventListener("click",e=>{e.target===E&&hideInitialisePrompt()})):console.log("Modal not found")});let initialisingBoardIndex=null;function showInitialisePrompt(e){console.log("showInitialisePrompt called with index:",e),initialisingBoardIndex=e;const t=document.getElementById("initBoardModal");if(console.log("Modal element:",t),t){console.log("Found initBoardModal, adding active class"),t.classList.add("active"),console.log("Current classes:",t.className);const e=document.getElementById("cancelInitBoard"),a=document.getElementById("confirmInitBoard");console.log("Cancel button exists:",!!e),console.log("Confirm button exists:",!!a)}else{console.error("ERROR: Could not find initBoardModal element in the DOM");const e=document.querySelectorAll(".modal-overlay");console.log("Found",e.length,"modal-overlay elements"),e.forEach((e,t)=>{console.log(`Modal ${t} id:`,e.id)})}}function hideInitialisePrompt(){console.log("hideInitialisePrompt called"),initialisingBoardIndex=null;const e=document.getElementById("initBoardModal");e?(console.log("Found initBoardModal, removing active class"),e.classList.remove("active")):console.error("ERROR: Could not find initBoardModal element when trying to hide it")}async function initialiseBoard(e){if(null===e||e<0||e>=boardConfigurations.length)showToast("error","Error","Invalid board index for initialisation");else{showToast("info","Initialising...","Attempting to initialise board. This may take a few seconds.",1e4),console.log("Attempting to initialise board at index:",e);try{const t=new XMLHttpRequest,a=`/api/boards/initialise?id=${e}`;console.log("Making XHR request to:",a),t.withCredentials=!0,t.onloadstart=()=>console.log("XHR load started"),t.onprogress=e=>console.log(`XHR progress: ${e.loaded} bytes`),t.onabort=()=>console.log("XHR aborted"),t.onerror=()=>console.log("XHR error occurred"),t.ontimeout=()=>console.log("XHR timed out"),t.onloadend=()=>console.log("XHR load ended");const n=await new Promise((e,n)=>{t.onreadystatechange=function(){if(console.log(`XHR state change: readyState=${t.readyState}, status=${t.status}`),4===t.readyState)if(t.status>=200&&t.status<300)try{const a=JSON.parse(t.responseText);e({ok:!0,status:t.status,result:a})}catch(e){console.error("Error parsing JSON response:",e),n(new Error("Invalid JSON response"))}else console.error("XHR request failed:",t.status,t.statusText),console.error("XHR response text:",t.responseText),n(new Error(`Server returned ${t.status}: ${t.statusText}`))},t.timeout=15e3,t.open("GET",a,!0),t.setRequestHeader("Access-Control-Allow-Origin","*"),t.setRequestHeader("Access-Control-Allow-Methods","GET"),t.setRequestHeader("Access-Control-Allow-Headers","Content-Type"),t.send(),console.log("XHR request sent")});if(console.log("XHR response:",n),document.querySelectorAll(".toast").forEach(e=>{"Initialising..."===e.querySelector(".toast-title").textContent&&e.remove()}),!n.ok)throw new Error(n.result.error||"Failed to initialise board");showToast("success","Success",`Board ${boardConfigurations[e].name} initialised with Slave ID ${n.result.slave_id}`),boardConfigurations[e].initialised=!0,boardConfigurations[e].slave_id=n.result.slave_id,renderBoardsList()}catch(e){console.error("Board initialisation error:",e),showToast("error","Error",`Failed to initialise board. ${e.message||""} Ensure the board is in Address Assignment Mode (blue LED lit).`)}}}let boardStatusChart=null,selectedBoardId=null,statusRefreshInterval=null,connectStatusRefreshInterval=null;const CLIENT_HISTORY_MAX_POINTS=900;let clientTemperatureHistory={timestamps:[],channels:[]};const chartColors=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(255, 159, 64)","rgb(201, 203, 207)","rgb(99, 255, 132)","rgb(255, 99, 255)","rgb(0, 191, 255)","rgb(255, 140, 0)","rgb(50, 205, 50)","rgb(220, 20, 60)","rgb(138, 43, 226)","rgb(255, 20, 147)","rgb(0, 206, 209)","rgb(255, 215, 0)","rgb(127, 255, 0)","rgb(255, 69, 0)","rgb(72, 61, 139)","rgb(255, 105, 180)","rgb(32, 178, 170)","rgb(255, 165, 0)","rgb(106, 90, 205)"],thermocoupleLookup={0:"K",1:"J",2:"T",3:"E",4:"N",5:"S",6:"B",7:"R"};function initBoardStatusPage(){console.log("Initializing board status page"),statusRefreshInterval&&clearInterval(statusRefreshInterval),loadBoardStatusList();const e=document.getElementById("statusBoardSelect");e&&e.addEventListener("change",function(){selectedBoardId=this.value,selectedBoardId&&loadBoardStatus(selectedBoardId)}),statusRefreshInterval=setInterval(refreshBoardStatus,2e3)}async function loadBoardStatusList(){try{const e=await fetch("/api/status");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json(),a=document.getElementById("statusBoardSelect"),n=document.getElementById("noBoardsStatus"),o=document.getElementById("boardStatusContent");a.innerHTML="",t&&t.length>0?(t.forEach(e=>{const t=document.createElement("option");t.value=e.id;const n=e.connected?"":" - DISCONNECTED";t.textContent=`${e.name} (${e.type})${n}`,e.connected||(t.style.color="#ff6b6b",t.style.fontWeight="bold"),a.appendChild(t)}),n.style.display="none",a.options.length>0?(a.selectedIndex=0,selectedBoardId=a.value,o.style.display="block",loadBoardStatus(selectedBoardId)):(n.style.display="block",o.style.display="none")):(n.style.display="block",o.style.display="none")}catch(e){console.error("Error loading board status list:",e),showToast("error","Error","Failed to load board list")}}async function loadBoardStatus(e){try{const t=await fetch(`/api/status/board?id=${e}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const a=await t.json();console.log("Board status data:",a),document.getElementById("boardInfoName").textContent=a.name||"Not specified",document.getElementById("boardInfoType").textContent=a.type||"Unknown type";const n=document.getElementById("boardInfoConnectionStatus");n.textContent=a.connected?"Connected":"Disconnected",n.className=a.connected?"status-connected":"status-disconnected",document.getElementById("boardInfoSlaveId").textContent=a.slave_id||"N/A",document.getElementById("boardInfoModbusPort").textContent=void 0!==a.modbus_port?`Port ${a.modbus_port+1}`:"N/A",document.getElementById("boardInfoPollTime").textContent=a.poll_time?`${a.poll_time} ms`:"N/A";const o=document.getElementById("boardInfo");if(o&&(o.className=a.connected?"board-info-connected":"board-info-disconnected"),connectStatusGlobal[e]=a.connected,initStatusGlobal[e]=a.initialised,"Thermocouple IO"===a.type){if(document.getElementById("thermocoupleContent").style.display="block",document.getElementById("thermocoupleOverview").style.display="block",!a.thermocouple)return console.error("Thermocouple data missing from API response"),void showToast("error","Error","Failed to load thermocouple data");a.thermocouple.errors?(updateErrorIndicator("modbusError",a.thermocouple.errors.modbus),updateErrorIndicator("i2cError",a.thermocouple.errors.i2c),updateErrorIndicator("psuError",a.thermocouple.errors.psu)):console.warn("Error indicators missing in API response");const e=document.getElementById("psuVoltage");if(e){const t=void 0!==a.thermocouple.psu_voltage?`${a.thermocouple.psu_voltage.toFixed(2)}V`:"N/A";e.textContent=a.connected?t:`${t} (STALE)`}const t=document.getElementById("thermocoupleOverview");t&&(a.connected?(t.classList.remove("board-offline"),t.title=""):(t.classList.add("board-offline"),t.title="Board is offline - data may be stale")),a.thermocouple.channels&&Array.isArray(a.thermocouple.channels)?(updateThermocoupleChannels(a.thermocouple.channels,a.connected),updateClientTemperatureHistory(a.thermocouple.channels,a.connected),updateTemperatureChart(clientTemperatureHistory)):(console.error("Thermocouple channel data missing or invalid"),document.getElementById("channelCards").innerHTML='<p class="no-boards-message">No thermocouple channel data available</p>')}else document.getElementById("thermocoupleContent").style.display="none",document.getElementById("thermocoupleOverview").style.display="none"}catch(e){console.error("Error loading board status:",e),showToast("error","Error","Failed to load board status")}}function refreshBoardStatus(){selectedBoardId&&document.getElementById("board-status").classList.contains("active")&&loadBoardStatus(selectedBoardId)}function updateErrorIndicator(e,t){const a=document.getElementById(e);a&&(a.textContent=t?"Error":"OK",a.className="error-state "+(t?"error":"ok"))}function updateThermocoupleChannels(e,t=!0){const a=document.getElementById("channelCards");if(a.innerHTML="",!e||!Array.isArray(e)||0===e.length)return void(a.innerHTML='<p class="no-boards-message">No channel data available</p>');let n=!1,o=!1;for(let s=0;s<8;s++){const r=e.find(e=>e&&e.number===s);if(!r){const e=document.createElement("div");e.className="channel-card",e.innerHTML=`\n                <div class="channel-card-header">\n                    <span class="channel-title">Channel ${s+1}</span>\n                    <span class="channel-temp">N/A</span>\n                </div>\n                <div class="channel-details">\n                    <div class="detail-item">\n                        <span class="info-label">Type:</span>\n                        <span class="info-value">Unknown</span>\n                    </div>\n                    <div class="detail-item">\n                        <span class="info-label">Setpoint:</span>\n                        <span class="info-value">N/A</span>\n                    </div>\n                    <div class="detail-item">\n                        <span class="info-label">Hysteresis:</span>\n                        <span class="info-value">N/A</span>\n                    </div>\n                    <div class="detail-item">\n                        <span class="info-label">Cold Junction:</span>\n                        <span class="info-value">N/A</span>\n                    </div>\n                </div>\n            `,a.appendChild(e);continue}const d=document.createElement("div");d.className="channel-card",t||(d.classList.add("board-offline"),d.title="Board is offline - data may be stale");let i="";r.status&&r.status.alarm_state?i="alarm":(r.status&&r.status.open_circuit||r.status&&r.status.short_circuit)&&(i="fault");let l="N/A";"number"==typeof r.temperature?r.status&&(r.status.open_circuit||r.status.short_circuit)?l="Open Circuit":(l=r.temperature.toFixed(1)+"°C",t||(l+=" (OFFLINE)")):t||(l="N/A (OFFLINE)");const c=thermocoupleLookup[r.tc_type]||"Unknown",u=(e,t=1)=>"number"==typeof e?e.toFixed(t):"N/A",m=r.settings&&r.settings.alert_latch,h=(r.status&&r.status.alarm_state,"number"==typeof r.temperature?r.temperature:null),p="number"==typeof r.alert_setpoint?r.alert_setpoint:null,g=null!==h&&null!==p&&h<p;m&&(o=!0,g&&(n=!0));let b=`\n            <div class="channel-card-header">\n                <span class="channel-title">${r.channel_name||`Channel ${(void 0!==r.number?r.number:s)+1}`}</span>\n                <span class="channel-temp ${i}">${l}</span>\n            </div>\n            <div class="channel-details">\n                <div class="detail-item">\n                    <span class="info-label">Type:</span>\n                    <span class="info-value">Type ${c}</span>\n                </div>\n                <div class="detail-item">\n                    <span class="info-label">Setpoint:</span>\n                    <span class="info-value">${u(r.alert_setpoint)}°C</span>\n                </div>\n                <div class="detail-item">\n                    <span class="info-label">Hysteresis:</span>\n                    <span class="info-value">${void 0!==r.alarm_hysteresis?r.alarm_hysteresis:"N/A"}°C</span>\n                </div>\n                <div class="detail-item">\n                    <span class="info-label">Cold Junction:</span>\n                    <span class="info-value">${u(r.cold_junction)}°C${t?"":" (STALE)"}</span>\n                </div>\n            </div>\n            <div class="channel-status-indicators">\n                ${r.settings&&r.settings.alert_enable?'<span class="channel-status-indicator enabled">Alert Enabled</span>':'<span class="channel-status-indicator disabled">Alert Disabled</span>'}\n                ${r.settings&&r.settings.output_enable?'<span class="channel-status-indicator enabled">Output Enabled</span>':'<span class="channel-status-indicator disabled">Output Disabled</span>'}\n                ${r.status&&r.status.alarm_state?'<span class="channel-status-indicator alarm">Alarm Active</span>':""}\n                ${r.status&&r.status.output_state?'<span class="channel-status-indicator enabled">Output On</span>':'<span class="channel-status-indicator disabled">Output Off</span>'}\n                ${r.status&&(r.status.open_circuit||r.status.short_circuit)?'<span class="channel-status-indicator fault">Fault</span>':""}\n                ${r.settings&&r.settings.alert_latch?'<span class="channel-status-indicator enabled">Latch Enabled</span>':""}\n            </div>\n        `;m&&(b+=`\n            <div class="channel-alarm-actions">\n                <button class="btn btn-alarm reset-alarm-btn" data-channel="${r.number}" ${g?"":"disabled"}>\n                    Reset Alarm${g?"":" (Temp > Setpoint)"}\n                </button>\n            </div>`),d.innerHTML=b,a.appendChild(d)}0===a.children.length&&(a.innerHTML='<p class="no-boards-message">No configured thermocouple channels</p>');const s=document.getElementById("resetAllAlarmsBtn");s&&(s.disabled=!(o&&n)),document.querySelectorAll(".reset-alarm-btn").forEach(e=>{e.addEventListener("click",function(){resetChannelAlarm(this.getAttribute("data-channel"))})})}async function resetChannelAlarm(e){try{if(!selectedBoardId)return void showToast("error","Error","No board selected");const t=parseInt(e),a=await fetch(`/api/status/reset_alarm?id=${selectedBoardId}&channel=${t}`);if(!a.ok)throw new Error(`HTTP error! status: ${a.status}`);const n=await a.json();if(!n.success)throw new Error(n.error||"Failed to reset alarm");showToast("success","Success",`Reset alarm for channel ${t+1}`),loadBoardStatus(selectedBoardId)}catch(e){console.error("Error resetting channel alarm:",e),showToast("error","Error",`Failed to reset alarm: ${e.message}`)}}async function resetAllAlarms(){try{if(!selectedBoardId)return void showToast("error","Error","No board selected");const e=await fetch(`/api/status/reset_all_alarms?id=${selectedBoardId}`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();if(!t.success)throw new Error(t.error||"Failed to reset alarms");showToast("success","Success","Reset all alarms"),loadBoardStatus(selectedBoardId)}catch(e){console.error("Error resetting all alarms:",e),showToast("error","Error",`Failed to reset alarms: ${e.message}`)}}function initBoardStatusPage(){console.log("Initializing board status page"),statusRefreshInterval&&clearInterval(statusRefreshInterval),loadBoardStatusList();const e=document.getElementById("statusBoardSelect");e&&e.addEventListener("change",function(){selectedBoardId=this.value,selectedBoardId&&(loadBoardStatus(selectedBoardId),resetClientTemperatureHistory(),boardStatusChart&&(boardStatusChart.destroy(),boardStatusChart=null))});const t=document.getElementById("resetAllAlarmsBtn");t&&t.addEventListener("click",resetAllAlarms),statusRefreshInterval=setInterval(refreshBoardStatus,2e3)}function updateClientTemperatureHistory(e,t=!0){const a=(new Date).getTime()/1e3;if(0===clientTemperatureHistory.channels.length)for(let t=0;t<8;t++)clientTemperatureHistory.channels[t]={number:t,tc_type:e.find(e=>e&&e.number===t)?.tc_type||0,data:[]};clientTemperatureHistory.timestamps.push(a),clientTemperatureHistory.timestamps.length>900&&clientTemperatureHistory.timestamps.shift();for(let a=0;a<8;a++){const n=e.find(e=>e&&e.number===a);let o=null;t&&n&&"number"==typeof n.temperature&&(o=n.status&&(n.status.open_circuit||n.status.short_circuit)?null:n.temperature),clientTemperatureHistory.channels[a].data.push(o),clientTemperatureHistory.channels[a].data.length>900&&clientTemperatureHistory.channels[a].data.shift()}}function updateTemperatureChart(e){const t=document.getElementById("temperatureChart");if(t)if(boardStatusChart)boardStatusChart.data.labels=e.timestamps.map(e=>{const t=(new Date).getTime()/1e3,a=Math.round(t-e);return a>=0?a:0}).map(e=>{if(e<60)return e+"s";{const t=e%60;return`${Math.floor(e/60)}m${t>0?t+"s":""}`}}),e.channels.forEach((e,t)=>{t<boardStatusChart.data.datasets.length?boardStatusChart.data.datasets[t].data=e.data:boardStatusChart.data.datasets.push({label:`Ch. ${e.number+1}`,data:e.data,borderColor:chartColors[t%chartColors.length],backgroundColor:chartColors[t%chartColors.length]+"20",fill:!1,tension:.2,pointRadius:1,borderWidth:2})}),boardStatusChart.data.datasets.length>e.channels.length&&(boardStatusChart.data.datasets.length=e.channels.length),boardStatusChart.update(),updateChartLegend(e.channels);else{const a=document.getElementById("chartLegend");a&&(a.innerHTML="",e.channels.forEach((e,t)=>{if(!e||!e.data||!Array.isArray(e.data))return;if(0===e.data.length)return;const n=chartColors[t%chartColors.length],o=document.createElement("div");o.className="legend-item",o.dataset.index=t;const s=e.number+1,r=thermocoupleLookup[e.tc_type]||"Unknown";o.innerHTML=`\n                    <div class="legend-color" style="background-color: ${n};"></div>\n                    <div class="legend-label">Channel ${s} (Type ${r})</div>\n                `,o.addEventListener("click",function(){const e=parseInt(this.dataset.index);if(boardStatusChart&&"function"==typeof boardStatusChart.isDatasetVisible){const t=boardStatusChart.isDatasetVisible(e);boardStatusChart.setDatasetVisibility(e,!t),this.classList.toggle("disabled",t),boardStatusChart.update()}}),a.appendChild(o)})),boardStatusChart=new Chart(t,{type:"line",data:{labels:e.timestamps.map(e=>{const t=(new Date).getTime()/1e3,a=Math.round(t-e);return a>=0?a:0}).map(e=>{if(e<60)return e+"s";{const t=e%60;return`${Math.floor(e/60)}m${t>0?t+"s":""}`}}),datasets:e.channels.map((e,t)=>({label:`Ch. ${e.number+1}`,data:e.data,borderColor:chartColors[t%chartColors.length],backgroundColor:chartColors[t%chartColors.length]+"20",fill:!1,tension:.2,pointRadius:1,borderWidth:2}))},options:{responsive:!0,maintainAspectRatio:!1,animation:{duration:500},plugins:{legend:{display:!1},tooltip:{mode:"index",intersect:!1,callbacks:{label:function(e){const t=e.dataset.label||"",a=e.parsed.y;return`${t}: ${null!==a?a.toFixed(1):"N/A"}°C`},title:function(e){return e&&e.length>0?`${e[0].label} ago`:""}}}},scales:{x:{title:{display:!0,text:"Time ago"},reverse:!0,ticks:{maxTicksLimit:10}},y:{title:{display:!0,text:"Temperature (°C)"}}}}})}}function updateChartLegend(e){const t=document.getElementById("chartLegend");if(!t)return;const a=t.querySelectorAll(".legend-item");e.forEach((e,t)=>{if(e&&e.data&&Array.isArray(e.data)&&0!==e.data.length&&t<a.length){const n=thermocoupleLookup[e.tc_type]||"Unknown",o=e.number+1,s=a[t].querySelector(".legend-label");s&&(s.textContent=`Channel ${o} (Type ${n})`)}})}document.addEventListener("DOMContentLoaded",function(){const e=document.querySelector('a[data-page="board-status"]');if(e&&e.addEventListener("click",function(){initBoardStatusPage()}),!window.Chart){function t(){console.log("Attempting to load local Chart.js");const e=document.createElement("script");e.src="script/chart.js",e.onload=function(){console.log("Local Chart.js loaded successfully")},e.onerror=function(){console.error("Failed to load Chart.js from local fallback")},document.head.appendChild(e)}console.log("Loading Chart.js...");const a=document.createElement("script");a.src="https://cdn.jsdelivr.net/npm/chart.js";const n=setTimeout(function(){console.log("CDN load timeout - falling back to local version"),t()},3e3);a.onload=function(){clearTimeout(n),console.log("Chart.js loaded successfully from CDN")},a.onerror=function(){clearTimeout(n),console.log("Failed to load Chart.js from CDN, falling back to local version"),t()},document.head.appendChild(a)}});let dashboardItems=[],dashboardEditMode=!1,dashboardRefreshInterval=null,dashboardChart=null,dashboardChartVisible=!1,dashboardTemperatureHistory={timestamps:[],channels:[]},dashboardChartTimeframe=1800,dashboardUpdateInterval=2e3;const MAX_DASHBOARD_POINTS=1e5,MIN_UPDATE_INTERVAL=2e3;function initDashboard(){console.log("Initializing dashboard");const e=document.getElementById("editDashboardBtn"),t=document.getElementById("saveDashboardBtn"),a=document.getElementById("cancelDashboardBtn");e&&e.addEventListener("click",enableDashboardEditMode),t&&t.addEventListener("click",saveDashboardOrder),a&&a.addEventListener("click",disableDashboardEditMode),loadDashboardItems()}async function loadDashboardItems(){try{const e=await fetch("/api/dashboard/items"),t=await e.json();dashboardItems=t.items||[],dashboardItems.sort((e,t)=>e.display_order-t.display_order),dashboardChartVisible=t.chart_visible||!1,renderDashboardItems();const a=document.getElementById("dashboardChartSection");a&&(a.style.display=dashboardChartVisible?"block":"none"),dashboardEditMode&&addChartVisibilityToggle(),dashboardChartVisible&&!dashboardChart&&initDashboardChart(),calculateDashboardUpdateInterval(),dashboardRefreshInterval||(dashboardRefreshInterval=setInterval(refreshDashboardData,dashboardUpdateInterval))}catch(e){console.error("Error loading dashboard items:",e),showToast("error","Error","Failed to load dashboard items")}}function renderDashboardItems(){const e=document.getElementById("dashboardItemsContainer"),t=document.getElementById("noDashboardItems");if(e){if(e.innerHTML="",0===dashboardItems.length)return t&&(t.style.display="block"),void(e.style.display="none");t&&(t.style.display="none"),e.style.display="grid",dashboardItems.forEach(t=>{const a=document.createElement("div");a.className="dashboard-item",a.id=`dashboard-item-${t.board_index}-${t.channel_index}`,a.dataset.boardIndex=t.board_index,a.dataset.channelIndex=t.channel_index,a.dataset.displayOrder=t.display_order;const n=document.createElement("div");n.className="board-name",n.textContent=t.board_name;const o=document.createElement("div");o.className="channel-name",o.textContent=t.channel_name;const s=document.createElement("div");s.className="temperature",s.innerHTML="&ndash;.&ndash; °C";const r=document.createElement("div");r.className="cold-junction",r.innerHTML="CJ: &ndash;.&ndash; °C";const d=document.createElement("div");d.className="output-status",d.innerHTML='<span class="output-indicator"></span> Output: &ndash;';const i=document.createElement("div");i.className="alert-status",a.appendChild(n),a.appendChild(o),a.appendChild(s),a.appendChild(r),a.appendChild(d),a.appendChild(i);const l=t.show_in_chart||!1;if(l&&a.classList.add("in-chart"),dashboardEditMode){const e=document.createElement("div");e.className="chart-toggle",e.innerHTML=`\n                <button class="btn btn-sm ${l?"btn-success":"btn-secondary"}" \n                        onclick="toggleDashboardItemChart(${t.board_index}, ${t.channel_index})">\n                    <i class="fas fa-chart-line"></i> ${l?"In Chart":"Add to Chart"}\n                </button>\n            `,a.appendChild(e)}e.appendChild(a)}),dashboardEditMode&&initSortable()}}async function refreshDashboardData(){if(0===dashboardItems.length)return;const e=document.getElementById("dashboard");if(!e||e.classList.contains("active"))try{const e=[...new Set(dashboardItems.map(e=>e.board_index))];for(const t of e){const e=await fetch(`/api/status/board?id=${t}`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.json();if("Thermocouple IO"===a.type){if(!a.thermocouple||!a.thermocouple.channels){console.error("Thermocouple data missing from API response");continue}updateDashboardThermocoupleItems(t,a.thermocouple.channels,a.connected),dashboardChartVisible&&updateDashboardTemperatureHistory()}}}catch(e){console.error("Error refreshing dashboard data:",e)}}function updateDashboardThermocoupleItems(e,t,a=!0){dashboardItems.filter(t=>t.board_index==e).forEach(n=>{const o=n.channel_index;if(o>=t.length)return;const s=t[o];if(!s)return;const r=document.getElementById(`dashboard-item-${e}-${o}`);if(!r)return;a?(r.classList.remove("board-offline"),r.title=""):(r.classList.add("board-offline"),r.title="Board is offline - data may be stale");const d=r.querySelector(".temperature");if(d)if(a)s.status&&(s.status.open_circuit||s.status.short_circuit)?(d.innerHTML="Fault",d.style.color="orange"):(d.innerHTML=void 0!==s.temperature?`${s.temperature.toFixed(1)} °C`:"&ndash;.&ndash; °C",s.status&&s.status.alarm_state?d.style.color="orangeRed":d.style.color="#2196F3");else{const e=void 0!==s.temperature?`${s.temperature.toFixed(1)} °C`:"&ndash;.&ndash; °C";d.innerHTML=`${e} <span class="offline-indicator">(OFFLINE)</span>`,d.style.color="#999"}const i=r.querySelector(".cold-junction");if(i){const e=void 0!==s.cold_junction?`CJ: ${s.cold_junction.toFixed(1)} °C`:"CJ: &ndash;.&ndash; °C";a?(i.innerHTML=e,i.style.color=""):(i.innerHTML=`${e} <span class="offline-indicator">(STALE)</span>`,i.style.color="#999")}const l=r.querySelector(".output-status");if(l)if(s.status&&void 0!==s.status.output_state){const e=!0===s.status.output_state||1===s.status.output_state;if(a)e?(l.innerHTML='<span class="output-indicator output-on"></span> Output: ON',l.style.color=""):(l.innerHTML='<span class="output-indicator output-off"></span> Output: OFF',l.style.color="");else{const t=e?"Output: ON":"Output: OFF",a=e?"output-on":"output-off";l.innerHTML=`<span class="output-indicator ${a}"></span> ${t} <span class="offline-indicator">(STALE)</span>`,l.style.color="#999"}}else l.innerHTML='<span class="output-indicator"></span> Output: &ndash;',l.style.color=a?"":"#999";const c=r.querySelector(".alert-status");c&&(c.className="alert-status",s.status&&s.status.alarm_state&&(c.classList.add("alert-active"),a||c.classList.add("stale-data")),a||c.classList.add("board-offline"))})}function enableDashboardEditMode(){dashboardEditMode=!0,document.getElementById("editDashboardBtn").style.display="none",document.getElementById("saveDashboardBtn").style.display="inline-block",document.getElementById("cancelDashboardBtn").style.display="inline-block";const e=document.getElementById("dashboardItemsContainer");e&&e.classList.add("dashboard-edit-mode"),renderDashboardItems(),addChartVisibilityToggle(),showToast("info","Edit Mode","Dashboard is now in edit mode. Drag and drop items to rearrange them.")}async function disableDashboardEditMode(){dashboardEditMode=!1,document.getElementById("editDashboardBtn").style.display="inline-block",document.getElementById("saveDashboardBtn").style.display="none",document.getElementById("cancelDashboardBtn").style.display="none";const e=document.getElementById("dashboardItemsContainer");e&&e.classList.remove("dashboard-edit-mode"),removeChartVisibilityToggle(),await loadDashboardItems(),dashboardChart&&dashboardChartVisible&&updateDashboardChartDatasets()}function initSortable(){const e=document.getElementById("dashboardItemsContainer");if(e)if("undefined"!=typeof Sortable)new Sortable(e,{animation:150,ghostClass:"dashboard-item-placeholder",onEnd:function(t){e.querySelectorAll(".dashboard-item").forEach((e,t)=>{e.dataset.displayOrder=t})}});else{console.error("Sortable library not loaded. Please include Sortable.js in your project."),showToast("error","Error","Sortable library not loaded. Edit mode may not work correctly.");const e=document.createElement("script");e.src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js",e.onload=function(){initSortable()},document.head.appendChild(e)}}async function saveDashboardOrder(){try{const e=document.getElementById("dashboardItemsContainer").querySelectorAll(".dashboard-item"),t=[];e.forEach((e,a)=>{t.push({board_index:parseInt(e.dataset.boardIndex),channel_index:parseInt(e.dataset.channelIndex),display_order:a})}),dashboardItems=t.map(e=>({...dashboardItems.find(t=>t.board_index==e.board_index&&t.channel_index==e.channel_index),display_order:e.display_order}));const a={items:t,chart_visible:dashboardChartVisible,chart_items:dashboardItems.filter(e=>e.show_in_chart).map(e=>({board_index:e.board_index,channel_index:e.channel_index}))},n=await fetch("/api/dashboard/order",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),o=await n.json();if("success"!==o.status)throw new Error(o.message||"Failed to save dashboard layout");showToast("success","Success","Dashboard layout saved successfully"),disableDashboardEditMode()}catch(e){console.error("Error saving dashboard layout:",e),showToast("error","Error","Failed to save dashboard layout")}}function hideLoadingOverlay(){const e=document.getElementById("loadingOverlay");e&&(e.style.opacity="0",setTimeout(()=>{e.style.display="none"},300))}function exportBoardConfiguration(){console.log("Exporting board configuration");const e=showToast("info","Exporting...","Preparing configuration file for download",5e3),t=document.createElement("a");t.href="/api/boards/export",t.download="board_config.json",t.addEventListener("click",()=>{e.parentNode&&e.parentNode.removeChild(e),showToast("success","Success","Board configuration exported successfully")}),document.body.appendChild(t),t.click(),document.body.removeChild(t)}function importBoardConfiguration(e){if(!e)return void showToast("error","Error","No file selected for import");if(console.log("Importing board configuration from file:",e.name),!e.name.toLowerCase().endsWith(".json"))return void showToast("error","Error","Selected file is not a JSON file");window.selectedConfigFile=e;document.getElementById("importConfirmModal").style.display="block"}function performImport(e,t="overwrite"){const a=showToast("info","Importing...","online"===t?"Importing configuration and bringing boards online...":"Uploading and validating configuration file...",1e4),n=new XMLHttpRequest,o=new FormData;o.append("file",e),n.onload=function(){if(a.parentNode&&a.parentNode.removeChild(a),200===n.status){console.log("Import successful:",n.responseText);showToast("success","Success","online"===t?"Board configuration imported and boards are now online!":"Board configuration imported successfully"),setTimeout(()=>{loadBoardConfigurations()},500)}else console.error("Error importing configuration:",n.responseText),showToast("error","Import Failed",n.responseText||"Failed to import configuration")},n.onerror=function(){a.parentNode&&a.parentNode.removeChild(a),console.error("Network error during import"),showToast("error","Import Failed","Network error during file upload")},n.open("POST","/api/boards/import?import_mode="+encodeURIComponent(t),!0),n.send(o),document.getElementById("configFileInput").value=""}function resetClientTemperatureHistory(){clientTemperatureHistory={timestamps:[],channels:[]}}function addChartVisibilityToggle(){const e=document.querySelector(".dashboard-header .dashboard-controls");if(!e)return;if(document.getElementById("chartVisibilityToggle"))return;const t=document.createElement("button");t.id="chartVisibilityToggle",t.className="btn btn-secondary "+(dashboardChartVisible?"active":""),t.innerHTML='<i class="fas fa-chart-line"></i> '+(dashboardChartVisible?"Hide Chart":"Show Chart"),t.onclick=toggleDashboardChartVisibility,e.appendChild(t)}function removeChartVisibilityToggle(){const e=document.getElementById("chartVisibilityToggle");e&&e.remove()}function toggleDashboardChartVisibility(){dashboardChartVisible=!dashboardChartVisible;const e=document.getElementById("dashboardChartSection"),t=document.getElementById("chartVisibilityToggle");e&&(e.style.display=dashboardChartVisible?"block":"none"),t&&(t.className="btn btn-secondary "+(dashboardChartVisible?"active":""),t.innerHTML='<i class="fas fa-chart-line"></i> '+(dashboardChartVisible?"Hide Chart":"Show Chart")),dashboardChartVisible&&!dashboardChart&&initDashboardChart()}function toggleDashboardItemChart(e,t){const a=dashboardItems.find(a=>a.board_index==e&&a.channel_index==t);if(!a)return;a.show_in_chart=!a.show_in_chart;const n=document.getElementById(`dashboard-item-${e}-${t}`);if(n){const e=a.show_in_chart;e?n.classList.add("in-chart"):n.classList.remove("in-chart");const t=n.querySelector(".chart-toggle button");t&&(t.className="btn btn-sm "+(e?"btn-success":"btn-secondary"),t.innerHTML='<i class="fas fa-chart-line"></i> '+(e?"In Chart":"Add to Chart"))}dashboardChartVisible&&dashboardChart&&updateDashboardChartDatasets()}function initDashboardChart(){const e=document.getElementById("dashboardChart");if(!e)return;resetDashboardTemperatureHistory();const t=document.getElementById("dashboardChartTimeframe");t&&t.addEventListener("change",function(){dashboardChartTimeframe=parseInt(this.value),calculateDashboardUpdateInterval(),trimDashboardTemperatureHistory(),dashboardChart&&updateDashboardChart(),dashboardRefreshInterval&&(clearInterval(dashboardRefreshInterval),dashboardRefreshInterval=setInterval(refreshDashboardData,dashboardUpdateInterval))}),dashboardChart=new Chart(e,{type:"line",data:{labels:[],datasets:[]},options:{responsive:!0,maintainAspectRatio:!1,animation:{duration:500},plugins:{legend:{display:!1},tooltip:{mode:"index",intersect:!1,callbacks:{label:function(e){const t=e.dataset.label||"",a=e.parsed.y;return`${t}: ${null!==a?a.toFixed(1):"N/A"}°C`},title:function(e){return e&&e.length>0?`${e[0].label} ago`:""}}}},scales:{x:{title:{display:!0,text:"Time ago"},reverse:!0,ticks:{maxTicksLimit:10}},y:{title:{display:!0,text:"Temperature (°C)"}}}}}),createDashboardChartLegend()}function resetDashboardTemperatureHistory(){dashboardTemperatureHistory={timestamps:[],channels:[]}}function trimDashboardTemperatureHistory(){if(!dashboardTemperatureHistory.timestamps.length)return;const e=Date.now()/1e3-dashboardChartTimeframe;let t=0;for(let a=0;a<dashboardTemperatureHistory.timestamps.length;a++)if(dashboardTemperatureHistory.timestamps[a]>=e){t=a;break}dashboardTemperatureHistory.timestamps=dashboardTemperatureHistory.timestamps.slice(t),dashboardTemperatureHistory.channels.forEach(e=>{e.data=e.data.slice(t)}),console.log(`Trimmed dashboard history to ${dashboardChartTimeframe}s timeframe, kept ${dashboardTemperatureHistory.timestamps.length} points`)}function calculateDashboardUpdateInterval(){const e=dashboardItems.filter(e=>e.show_in_chart),t=Math.max(1,e.length),a=Math.max(2e3,Math.floor(1e3*dashboardChartTimeframe/(1e5/t)));dashboardUpdateInterval=a,console.log(`Dashboard update interval: ${dashboardUpdateInterval}ms for ${t} channels over ${dashboardChartTimeframe}s`)}function updateDashboardTemperatureHistory(){if(!dashboardChartVisible)return;const e=Math.floor(Date.now()/1e3),t=Math.floor(1e5/Math.max(1,dashboardItems.filter(e=>e.show_in_chart).length));if(dashboardTemperatureHistory.timestamps.length>0){if(e-dashboardTemperatureHistory.timestamps[dashboardTemperatureHistory.timestamps.length-1]<Math.floor(dashboardUpdateInterval/1e3))return}dashboardTemperatureHistory.timestamps.push(e);const a=dashboardItems.filter(e=>e.show_in_chart);a.forEach((e,t)=>{dashboardTemperatureHistory.channels[t]||(dashboardTemperatureHistory.channels[t]={board_index:e.board_index,channel_index:e.channel_index,label:`${e.board_name} - ${e.channel_name}`,data:[]})}),a.forEach((e,t)=>{const a=document.getElementById(`dashboard-item-${e.board_index}-${e.channel_index}`);let n=null;if(a){const e=a.querySelector(".temperature");if(e&&e.textContent){const t=e.textContent.replace(/[^\d.-]/g,""),a=parseFloat(t);isNaN(a)||(n=a)}}dashboardTemperatureHistory.channels[t].data.push(n)});const n=e-dashboardChartTimeframe;let o=0;for(let e=0;e<dashboardTemperatureHistory.timestamps.length;e++)if(dashboardTemperatureHistory.timestamps[e]>=n){o=e;break}const s=Math.max(0,dashboardTemperatureHistory.timestamps.length-t);o=Math.max(o,s),o>0&&(dashboardTemperatureHistory.timestamps=dashboardTemperatureHistory.timestamps.slice(o),dashboardTemperatureHistory.channels.forEach(e=>{e.data=e.data.slice(o)})),dashboardChart&&updateDashboardChart()}function updateDashboardChart(){dashboardChart&&dashboardChartVisible&&(dashboardChart.data.labels=dashboardTemperatureHistory.timestamps.map(e=>{const t=(new Date).getTime()/1e3,a=Math.round(t-e),n=a>=0?a:0;if(n<60)return n+"s";{const e=n%60;return`${Math.floor(n/60)}m${e>0?e+"s":""}`}}),dashboardTemperatureHistory.channels.forEach((e,t)=>{t<dashboardChart.data.datasets.length?(dashboardChart.data.datasets[t].data=e.data,dashboardChart.data.datasets[t].label=e.label):dashboardChart.data.datasets.push({label:e.label,data:e.data,borderColor:chartColors[t%chartColors.length],backgroundColor:chartColors[t%chartColors.length]+"20",fill:!1,tension:.2,pointRadius:1,borderWidth:2})}),dashboardChart.data.datasets.length>dashboardTemperatureHistory.channels.length&&(dashboardChart.data.datasets.length=dashboardTemperatureHistory.channels.length),dashboardChart.update("none"),updateDashboardChartLegend())}function updateDashboardChartDatasets(){resetDashboardTemperatureHistory(),createDashboardChartLegend()}function createDashboardChartLegend(){const e=document.getElementById("dashboardChartLegend");if(!e)return;e.innerHTML="";dashboardItems.filter(e=>e.show_in_chart).forEach((t,a)=>{const n=chartColors[a%chartColors.length],o=document.createElement("div");o.className="legend-item",o.dataset.index=a,o.innerHTML=`\n            <div class="legend-color" style="background-color: ${n};"></div>\n            <div class="legend-label">${t.board_name} - ${t.channel_name}</div>\n        `,o.addEventListener("click",function(){const e=parseInt(this.dataset.index);if(dashboardChart&&"function"==typeof dashboardChart.isDatasetVisible){const t=dashboardChart.isDatasetVisible(e);dashboardChart.setDatasetVisibility(e,!t),this.classList.toggle("disabled",t),dashboardChart.update()}}),e.appendChild(o)})}function updateDashboardChartLegend(){const e=document.getElementById("dashboardChartLegend");if(!e)return;const t=e.querySelectorAll(".legend-item");dashboardItems.filter(e=>e.show_in_chart).forEach((e,a)=>{if(a<t.length){const n=t[a].querySelector(".legend-label");n&&(n.textContent=`${e.board_name} - ${e.channel_name}`)}})}document.addEventListener("DOMContentLoaded",function(){const e=document.querySelector('a[data-page="dashboard"]');e&&e.addEventListener("click",function(){const e=window.dashboardNeedsReload||!1;window.dashboardNeedsReload=!1,dashboardRefreshInterval&&(clearInterval(dashboardRefreshInterval),dashboardRefreshInterval=null),initDashboard(),e&&showToast("info","Dashboard Updated","Refreshing dashboard with latest configuration changes")}),document.querySelector("#dashboard").classList.contains("active")&&initDashboard()}),window.addEventListener("beforeunload",function(){const e=document.getElementById("loadingOverlay");e&&(e.style.opacity="1",e.style.display="flex")}),window.addEventListener("load",function(){setTimeout(hideLoadingOverlay,500)}),setTimeout(hideLoadingOverlay,15e3);